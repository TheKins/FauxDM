/*
================================================================================
 FauxDM ZScript Code
 
 Author: The Kinsie
 
 Purpose: Player actor
 
 Comment: 

================================================================================
*/

class FDM_Player : PlayerPawn
{
	Default
	{
		Speed 1;
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		Player.DisplayName "Marine";
		Player.CrouchSprite "PLYC";
		Player.StartItem "FDM_Machinegun";
		Player.StartItem "Fist";
		Player.StartItem "Clip", 50;
		
		Player.JumpZ 8.01;
		Player.TeleportFreezeTime 0;
		
		// Screw your locked doors!
		Player.StartItem "RedCard";
		Player.StartItem "RedSkull";
		Player.StartItem "BlueCard";
		Player.StartItem "BlueSkull";
		Player.StartItem "YellowCard";
		Player.StartItem "YellowSkull";
		
		Player.WeaponSlot 1, "FDM_Gauntlet";
		Player.WeaponSlot 2, "FDM_Machinegun";
		Player.WeaponSlot 3, "FDM_Shotgun", "FDM_SuperShotgun";
		Player.WeaponSlot 4, "FDM_Chaingun", "FDM_Minigun";
		Player.WeaponSlot 5, "FDM_RocketLauncher", "FDM_GrenadeLauncher";
		Player.WeaponSlot 6, "FDM_PlasmaRifle", "FDM_Railgun";
		Player.WeaponSlot 7, "FDM_BFG9000";
		Player.WeaponSlot 8, "FDM_Flamethrower";
		
		Player.ColorRange 112, 127;
		Player.Colorset 0, "$TXT_COLOR_GREEN",		0x70, 0x7F,  0x72;
		Player.Colorset 1, "$TXT_COLOR_GRAY",		0x60, 0x6F,  0x62;
		Player.Colorset 2, "$TXT_COLOR_BROWN",		0x40, 0x4F,  0x42;
		Player.Colorset 3, "$TXT_COLOR_RED",		0x20, 0x2F,  0x22;
		// Doom Legacy additions
		Player.Colorset 4, "$TXT_COLOR_LIGHTGRAY",	0x58, 0x67,  0x5A;
		Player.Colorset 5, "$TXT_COLOR_LIGHTBROWN",	0x38, 0x47,  0x3A;
		Player.Colorset 6, "$TXT_COLOR_LIGHTRED",	0xB0, 0xBF,  0xB2;
		Player.Colorset 7, "$TXT_COLOR_LIGHTBLUE",	0xC0, 0xCF,  0xC2;
		
		damagefactor "PlayerRocket", 0.5;
	}
	
	int mktime;
	int mkold;
	int mkdiff;

	States
	{
	Spawn:
		PLAY A -1;
		Loop;
	See:
		PLAY ABCD 4;
		Loop;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Melee:
		PLAY F 6 BRIGHT;
		Goto Missile;
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain;
		Goto Spawn;
	Death.Flamer:
		PLAY H 0 A_SetTranslation("Scorched");
		goto Death;
	Death:
		PLAY H 10;
		PLAY I 10 A_PlayerScream;
		PLAY J 10 A_NoBlocking;
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		GUTS A 0 
		{
			A_SetScale(1.0,1.0);
			A_PlaySound("actors/shared/gibbed");
		}
		goto GibAnim;
	XDeath.Telefrag:
		GUTS A 0 
		{
			A_SetScale(1.0,1.0);
			A_PlaySound("actors/shared/telefragged");
		}
		goto GibAnim;
	GibAnim:
		GUTS A 0
		{
			A_NoBlocking();
			A_SpawnProjectile("FDM_Gib_Eye",random(48,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Eye",random(48,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Head",random(48,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Heart",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Heart",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Intestines",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Intestines",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Ribs",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Ribs",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Spine",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
		}
		GUTS ABCDEFGHIJK 3;
		GUTS L -1;
		Stop;
	Death.Gauntlet:
		"####" "#" 0 { target.ACS_NamedExecuteAlways("FDM_HumiliationSound",0,0,0,0); }
		goto Death;
	XDeath.Gauntlet:
		"####" "#" 0 { target.ACS_NamedExecuteAlways("FDM_HumiliationSound",0,0,0,0); }
		goto XDeath;
	}
	
	// Disable the "Secret Found" stuff for now
	override bool OnGiveSecret(bool printmsg, bool playsound) { return false; }
	
	override void Tick()
	{
		// These have all been broken into seperate functions so that individual
		// actors can disable or override them for whatever reason.
		DoExtinguish();
		DoUnfuckDeath();
		DoManageMultiKills();
		
		Super.Tick();
	}
	
	// Play funny sound when wasting lots of dudes at once
	virtual void DoManageMultiKills()
	{
		int mknum;
		
		if (multiplayer)
		{
			mknum = self.player.FragCount;
		} else {
			mknum = CountInv("FDM_FragCounter");
		}
		
		if (!isFrozen())
		{
			mktime++;
		}
		
		if (mktime > 2)
		{
			mktime = 0;
			mkdiff = mknum - mkold;
			
			if (mkdiff > 0)
			{
				//Console.Printf("Diff: %i", mkdiff);
				
				ACS_NamedExecute("FDM_Multikills", 0, mkdiff);
				
				mkdiff = 0;
			}
			
			mkold = mknum;
		}
	}
	
	// Fix a weird bug where sometimes when accidentally killing yourself with a Plasma Rifle splash,
	// you don't actually enter your death state and die standing up without a death sound.
	virtual void DoUnfuckDeath()
	{
		if (health <= 0 && !InStateSequence(CurState, ResolveState("Death")) && !InStateSequence(CurState, ResolveState("XDeath")))
		{
			SetStateLabel("Death");
		}
	}
	
	// Get extinguished if entering water.
	virtual void DoExtinguish()
	{
		if (waterlevel > 0 && CountInv("FDM_BurnDOT"))
		{
			A_TakeInventory("FDM_BurnDOT", 9999);
			A_PlaySound("actors/shared/extinguish", CHAN_5);
			A_SpawnItem("FDM_ExtinguishSmokeGenerator");
		}
		
		if (pos.z == floorz && GetFloorTerrain().TerrainName == "Water" && waterlevel == 0 && CountInv("FDM_BurnDOT"))
		{
			A_TakeInventory("FDM_BurnDOT", 9999);
			A_PlaySound("actors/shared/extinguish", CHAN_5);
			A_SpawnItem("FDM_ExtinguishSmokeGenerator");
		}
		
		if (CountInv("PowerAsbestos"))
		{
			A_TakeInventory("FDM_BurnDOT", 9999);
		}
	}
	
	// If killed, let the monster taunt your corpse
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		if (source != self && source != null)
		{
			target = source;
			A_GiveInventory("FDM_MonsterTauntPlayer", 1, AAPTR_TARGET);
		}
		
		// And do a little flipspritery, while we're at it.
		bSPRITEFLIP = random(0,1);
		
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}
	
	// Make the cheats work properly.
	override void CheatGive (String name, int amount)
	{
		int i;
		Class<Inventory> type;
		let player = self.player;

		if (player.mo == NULL || player.health <= 0)
		{
			return;
		}

		int giveall = ALL_NO;
		if (name ~== "all")
		{
			giveall = ALL_YES;
		}
		else if (name ~== "everything")
		{
			giveall = ALL_YESYES;
		}

		if (name ~== "health")
		{
			if (amount > 0)
			{
				health += amount;
				player.health = health;
			}
			else
			{
				player.health = health = GetMaxHealth(true);
			}
		}

		if (giveall || name ~== "backpack")
		{
			// Select the correct type of backpack based on the game
			type = (class<Inventory>)(gameinfo.backpacktype);
			if (type != NULL)
			{
				GiveInventory(type, 1, true);
			}

			if (!giveall)
				return;
		}

		if (giveall || name ~== "ammo")
		{
			// Find every unique type of ammo. Give it to the player if
			// he doesn't have it already, and set each to its maximum.
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let ammotype = (class<Ammo>)(AllActorClasses[i]);

				if (ammotype && GetDefaultByType(ammotype).GetParentAmmo() == ammotype)
				{
					let ammoitem = FindInventory(ammotype);
					if (ammoitem == NULL)
					{
						ammoitem = Inventory(Spawn (ammotype));
						ammoitem.AttachToOwner (self);
						ammoitem.Amount = ammoitem.MaxAmount;
					}
					else if (ammoitem.Amount < ammoitem.MaxAmount)
					{
						ammoitem.Amount = ammoitem.MaxAmount;
					}
				}
			}

			if (!giveall)
				return;
		}

		if (giveall || name ~== "armor")
		{
			if (gameinfo.gametype != GAME_Hexen)
			{
				A_GiveInventory("FDM_BlueArmor", 1);
			}
			else
			{
				for (i = 0; i < 4; ++i)
				{
					let armoritem = Inventory(Spawn("HexenArmor"));
					armoritem.health = i;
					armoritem.Amount = 0;
					if (!armoritem.CallTryPickup (self))
					{
						armoritem.Destroy ();
					}
				}
			}

			if (!giveall)
				return;
		}

		if (giveall || name ~== "keys")
		{
			for (int i = 0; i < AllActorClasses.Size(); ++i)
			{
				if (AllActorClasses[i] is "Key")
				{
					let keyitem = GetDefaultByType (AllActorClasses[i]);
					if (keyitem.special1 != 0)
					{
						let item = Inventory(Spawn(AllActorClasses[i]));
						if (!item.CallTryPickup (self))
						{
							item.Destroy ();
						}
					}
				}
			}
			if (!giveall)
				return;
		}

		if (giveall || name ~== "weapons")
		{
			let savedpending = player.PendingWeapon;
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let type = (class<Weapon>)(AllActorClasses[i]);
				if (type != null && type != "Weapon")
				{
					// Don't give replaced weapons unless the replacement was done by Dehacked.
					let rep = GetReplacement(type);
					if (rep == type || rep is "DehackedPickup")
					{
						// Give the weapon only if it is set in a weapon slot.
						if (player.weapons.LocateWeapon(type))
						{
							readonly<Weapon> def = GetDefaultByType (type);
							if (giveall == ALL_YESYES || !def.bCheatNotWeapon)
							{
								GiveInventory(type, 1, true);
							}
						}
					}
				}
			}
			player.PendingWeapon = savedpending;

			if (!giveall)
				return;
		}

		if (giveall || name ~== "artifacts")
		{
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				type = (class<Inventory>)(AllActorClasses[i]);
				if (type!= null)
				{
					let def = GetDefaultByType (type);
					if (def.Icon.isValid() && def.MaxAmount > 1 &&
						!(type is "PuzzleItem") && !(type is "Powerup") && !(type is "Ammo") &&	!(type is "Armor"))
					{
						// Do not give replaced items unless using "give everything"
						if (giveall == ALL_YESYES || GetReplacement(type) == type)
						{
							GiveInventory(type, amount <= 0 ? def.MaxAmount : amount, true);
						}
					}
				}
			}
			if (!giveall)
				return;
		}

		if (giveall || name ~== "puzzlepieces")
		{
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let type = (class<PuzzleItem>)(AllActorClasses[i]);
				if (type != null)
				{
					let def = GetDefaultByType (type);
					if (def.Icon.isValid())
					{
						// Do not give replaced items unless using "give everything"
						if (giveall == ALL_YESYES || GetReplacement(type) == type)
						{
							GiveInventory(type, amount <= 0 ? def.MaxAmount : amount, true);
						}
					}
				}
			}
			if (!giveall)
				return;
		}

		if (giveall)
			return;

		type = name;
		if (type == NULL)
		{
			if (PlayerNumber() == consoleplayer)
				A_Log(String.Format("Unknown item \"%s\"\n", name));
		}
		else
		{
			GiveInventory(type, amount, true);
		}
		return;
	}
}
