/*
================================================================================
 FauxDM ZScript Code
 
 Author: The Kinsie (see comment)
 
 Purpose: Base monster code, from which all monsters are derived
 
 Comment: Things to keep in mind when making new monsters:
 
          1.) Keep the radius property at 16. Otherwise, monsters may become
		      stuck when spawning too close to walls or odd corners.
			  (MAP04 of FreeDM is a good test case.)
			  
          While I smushed this all together, Gutawer, Phantombeta,
          Jekyll Grim Payne, Zombie and Comet all deserve credit for
		  babying my dumb ass through all of this at one point or another.

================================================================================
*/

class FDM_BaseMonster : Actor
{
	Default
	{
		Speed 1;
		+NOBLOCKMONST
		+BLOCKASPLAYER
		+DROPOFF
		Monster;
	}
	
	int swimtimer;
	int sectordmgtimer;
	int tauntdelaytimer;
	vector3 oldPos;
	sound TauntSound;
	property TauntSound: TauntSound;
	vector2 neckchecker;
	int wallcooldown;
	int addtimer;
	
	States
	{
	Death.Gauntlet:
		"####" "#" 0 { target.ACS_NamedExecuteAlways("FDM_HumiliationSound",0,0,0,0); }
		"####" "#" 0 A_Jump(256, "Death");
		stop;
	XDeath.Gauntlet:
		"####" "#" 0 { target.ACS_NamedExecuteAlways("FDM_HumiliationSound",0,0,0,0); }
		"####" "#" 0 A_Jump(256, "XDeath");
		stop;
	Death.Flamer:
		"####" "#" 0 A_SetTranslation("Scorched");
		"####" "#" 0 A_Jump(256, "Death");
		stop;
	XDeath:
		GUTS A 0 
		{
			A_SetScale(1.0,1.0);
			A_PlaySound("actors/shared/gibbed", CHAN_5);
		}
		goto GibAnim;
	XDeath.Telefrag:
		GUTS A 0 
		{
			A_SetScale(1.0,1.0);
			A_PlaySound("actors/shared/telefragged", CHAN_5);
		}
		goto GibAnim;
	GibAnim:
		GUTS A 0
		{
			A_NoBlocking();
			A_SpawnProjectile("FDM_Gib_Eye",random(48,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Eye",random(48,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Head",random(48,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Heart",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Heart",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Intestines",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Intestines",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Ribs",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Ribs",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			A_SpawnProjectile("FDM_Gib_Spine",random(8,56),random(-4,4),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
		}
		GUTS ABCDEFGHIJK 3;
		GUTS L -1;
		Stop;
	GiveUp:
		"####" "#" 0 A_Jump(256, "Death");
		stop;
	}
	
	void A_FDMChase(statelabel melee = "Melee", statelabel missile = "Missile", int flags = 0)
	{
		DoAvoidWallrunning();
		DoClimbing();
		
		A_Chase(melee, missile, flags);
		PrioritizePlayers();
		A_Recoil(-speed);
		oldPos = pos;
	}
	
	void A_FDMRoam()
	{
		DoAvoidWallrunning();
		DoClimbing();
		
		A_Wander();
		A_Look();
		PrioritizePlayers();
		A_Recoil(-speed);
		oldPos = pos;
	}
	
	// If a player gets near a roaming enemy, and the enemy hasn't attacked in a little under
	// two seconds, switch targets to the player. This is to avoid situations where monsters
	// just wander past the player seemingly oblivious.
	virtual void PrioritizePlayers()
	{
		if ((!(target is "PlayerPawn")))
		{
			BlockThingsIterator it = BlockThingsIterator.Create(self,64,0);
			while (it.Next())
			{
				Actor mo = it.thing;
				
				if ((mo is "PlayerPawn") && addtimer <= 0)
				{
					target = mo;
					break;
				}
			}
		}
	}
	
	override void Tick()
	{
		// These have all been broken into seperate functions so that individual
		// actors can disable or override them for whatever reason.
		
		DoNeckChecker();
		DoAllianceFlicker();
		DoFluidNavigation();
		DoExtinguish();
		DoHurtFloorDamage();
		DoTaunts();
		DoGiveUp();
		
		// Stops monsters from switching away from their opponent to the player
		// in the middle of a fight (see PrioritizePlayers()...)
		if (addtimer > 0)
		{
			addtimer--;
		}
		
		if (curstate == MissileState || curstate == MeleeState)
		{
			addtimer = 60;
		}
		
		Super.Tick();
	}
	
	virtual void DoGiveUp()
	{
		// If the player's won... give up!
		if (CountInv("FDM_MonsterGiveUp"))
		{
			if (!InStateSequence(CurState, ResolveState("Pain")) && !InStateSequence(CurState, ResolveState("GiveUp")) && health > 0)
			{
				SetStateLabel("GiveUp");
			}
		}
	}
	
	virtual void DoAvoidWallrunning()
	{
		// Making an attempt to prevent actors running into walls a bunch
		if (pos.xy == oldpos.xy)
		{
			A_Recoil(speed * 2);
			self.angle = self.angle + 180;
		}
	}
	
	virtual void DoNeckChecker()
	{
		// Make something resembling an effort to not swan-dive into toxic waste.
		// Not perfect, but that probably makes it more realistic...
		neckchecker = level.Vec2Offset (self.pos.xy, AngleToVector (self.angle, 32));
		
		if (level.IsPointInLevel((neckchecker.x, neckchecker.y, GetZAt(neckchecker.x, neckchecker.y)))
		&& level.PointInSector(neckchecker).damageamount != 0
		&& self.CurSector.damageamount == 0
		&& self.pos.z == self.floorz && health > 0)
		{
			A_Recoil(10);
			self.angle = self.angle + 180;
		}
	}
	
	virtual void DoAllianceFlicker()
	{
		// Randomly flick between friendly and unfriendly if you don't have a
		// target, in order to simulate a free-for-all.
		if (target == null && health > 0)
		{
			bFRIENDLY = random(0,1);
		}
		
		if (target != null && target.health > 0 && health > 0)
		{
			bFRIENDLY = random(0,1);
		}
		
		// If target is a player, maybe don't be friends with that player?
		// I dunno, just a suggestion?!
		if (target is "PlayerPawn" && target.player)
		{
			bFRIENDLY = 0;
		}
	}
	
	virtual void DoFluidNavigation()
	{
		// If in water and alive, try and get out of it.
		swimtimer++;
		if (swimtimer >= 8)
		{
			swimtimer = 0;
			
			if (waterlevel >= 2 && health > 0)
			{
				ThrustThingZ(0,16,0,1);
			}
		}
		
		FLineTraceData SurfaceData;
		self.LineTrace(self.angle, 72, 0, TRF_THRUACTORS, offsetz: 8, data:SurfaceData);
		
		if (waterlevel >= 1 && health > 0 && SurfaceData.HitType == SurfaceData.TRACE_HitWall)
		{
			self.vel.z = 8;
		}
		
		
		// If in water and dead, sadly float up to the surface
		if (waterlevel > 1 && health <= 0)
		{
			ThrustThingZ(0,1,0,0);
		}
	}
	
	virtual void DoClimbing()
	{
		FLineTraceData SurfaceData;
		self.LineTrace(self.angle, 72, 0, TRF_THRUACTORS, offsetz: MaxStepHeight + 2, data:SurfaceData);
		
		if (health > 0 && pos.z == floorz
		&& SurfaceData.HitType == SurfaceData.TRACE_HitWall
		&& SurfaceData.LinePart == Side.bottom)
		{
			if (SurfaceData.HitLine.Flags & Line.ML_TWOSIDED)
			{
				FLineTraceData ConfirmData;
				self.LineTrace(self.angle, SurfaceData.Distance + 16, 0, TRF_THRUACTORS|TRF_BLOCKSELF, offsetz: self.height, data:ConfirmData);
				
				if (ConfirmData.HitType == SurfaceData.TRACE_HitNone)
				{
					//Console.printf ("Rock!");
					self.vel.z = 10;
				} else {				
					//angle = angle + 180;
				}
			}
		}
	}
	
	virtual void DoHurtFloorDamage()
	{
		// If on a hurtfloor... get hurt by it.
		if (sectordmgtimer < self.CurSector.damageinterval)
		{
			sectordmgtimer++;
		} else {
			sectordmgtimer = 0;
		}
		
		// Handle things a little differently depending on whether the actor is
		// in water or not. If they're not, only damage them if they're actually
		// on the floor. If they are, assume they're swimming in toxic waste or
		// nukage or some shit and ding them at any time.
		if (self.CurSector.damageamount != 0 && sectordmgtimer >= self.CurSector.damageinterval)
		{
			if (waterlevel == 0 && pos.z == GetZAt(pos.x, pos.y))
			{
				sectordmgtimer = 0;
				DamageMobj(self, self, self.CurSector.damageamount, self.CurSector.damagetype, 0, 0);
			}
			
			if (waterlevel > 0)
			{
				sectordmgtimer = 0;
				DamageMobj(self, self, self.CurSector.damageamount, self.CurSector.damagetype, 0, 0);
			}
		}
	}
	
	virtual void DoTaunts()
	{
		// Taunt other monsters with a local-volume sound.
		if (CountInv("FDM_MonsterTaunt"))
		{
			tauntdelaytimer++;
			
			if (tauntdelaytimer > 24 && health > 0)
			{
				A_TakeInventory("FDM_MonsterTaunt", 9999);
				A_PlaySound(TauntSound, CHAN_VOICE);
				tauntdelaytimer = 0;
			}
		}
		
		// Taunt players with a zero-attentuation sound, so they always hear it.
		if (CountInv("FDM_MonsterTauntPlayer"))
		{
			tauntdelaytimer++;
			
			if (tauntdelaytimer > 24 && health > 0)
			{
				A_TakeInventory("FDM_MonsterTauntPlayer", 9999);
				A_PlaySound(TauntSound, CHAN_VOICE, 1.0, 0, ATTN_NONE);
				tauntdelaytimer = 0;
			}
		}
	}
	
	// Get extinguished if entering water.
	virtual void DoExtinguish()
	{
		if (waterlevel > 0 && CountInv("FDM_BurnDOT"))
		{
			A_TakeInventory("FDM_BurnDOT", 9999);
			A_PlaySound("actors/shared/extinguish", CHAN_5);
			A_SpawnItem("FDM_ExtinguishSmokeGenerator");
		}
		
		if (pos.z == floorz && GetFloorTerrain().TerrainName == "Water" && waterlevel == 0 && CountInv("FDM_BurnDOT"))
		{
			A_TakeInventory("FDM_BurnDOT", 9999);
			A_PlaySound("actors/shared/extinguish", CHAN_5);
			A_SpawnItem("FDM_ExtinguishSmokeGenerator");
		}
	}
	
	// If killed (IF?!) give a frag to the lucky lad/lass/etc. responsible.
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		if (source != self && source != null)
		{
			target = source;
			A_GiveInventory("FDM_FragCounter", 1, AAPTR_TARGET);
			A_GiveInventory("FDM_FragCounterCareer", 1, AAPTR_TARGET);
			A_GiveInventory("FDM_MonsterTaunt", 1, AAPTR_TARGET);
		}
		
		// Fixes issue where friendly monsters don't count as killed monsters,
		// clogging up the spawners. I hope.
		bFRIENDLY = 0;
		
		// And do a little flipspritery, while we're at it.
		bSPRITEFLIP = random(0,1);
		
		// If enabled, prepare and print off an obit for the monster.
		if (fdm_monsterobits)
		{
			string whodunnit;
			string killerclass;
			string murderweapon;
			if (source is "PlayerPawn")
			{
				if (source.player != null)
				{
					whodunnit = source.player.GetUserName();
					killerclass = "Player";
					
					// By default, the weapon you're holding when the enemy dies
					// is what's reported as what killed them. This is not always
					// accurate.
					if (inflictor is "FDM_BFGBall"
					|| inflictor is "FDM_BFGBlastTLite"
					|| inflictor is "FDM_BFGBlastTShot"
					|| inflictor is "FDM_BFGBlastTShot2")
					{
						murderweapon = "FDM_BFG9000";
					} else if (inflictor is "FDM_PlasmaBall") {
						murderweapon = "FDM_PlasmaRifle";
					} else if (inflictor is "FDM_PlayerRocket") {
						murderweapon = "FDM_RocketLauncher";
					} else if (inflictor is "FDM_Grenade") {
						murderweapon = "FDM_GrenadeLauncher";
					} else if (MeansOfDeath == "Flamer") {
						murderweapon = "FDM_Flamethrower";
					} else if (inflictor is "FDM_ExplosiveBarrel") {
						murderweapon = "FDM_ExplosiveBarrel";	
					} else {
						murderweapon = Source.player.ReadyWeapon.GetClassName();
					}
				} else if (target.player != null) {
					whodunnit = target.player.GetUserName();
					killerclass = "Player";
					// By default, the weapon you're holding when the enemy dies
					// is what's reported as what killed them. This is not always
					// accurate.
					if (inflictor is "FDM_BFGBall"
					|| inflictor is "FDM_BFGBlastTLite"
					|| inflictor is "FDM_BFGBlastTShot"
					|| inflictor is "FDM_BFGBlastTShot2")
					{
						murderweapon = "FDM_BFG9000";
					} else if (inflictor is "FDM_PlasmaBall") {
						murderweapon = "FDM_PlasmaRifle";
					} else if (inflictor is "FDM_PlayerRocket") {
						murderweapon = "FDM_RocketLauncher";
					} else if (inflictor is "FDM_Grenade") {
						murderweapon = "FDM_GrenadeLauncher";
					} else if (MeansOfDeath == "Flamer") {
						murderweapon = "FDM_Flamethrower";
					} else if (inflictor is "FDM_ExplosiveBarrel") {
						murderweapon = "FDM_ExplosiveBarrel";	
					} else if (inflictor is "FDM_Car") {
						murderweapon = "FDM_Car";	
					} else {
						murderweapon = target.player.ReadyWeapon.GetClassName();
					}
				} else {
					whodunnit = "Some Asshole";
					killerclass = self.GetClassName();
					murderweapon = "Monster";
				}
			}
			else if (source != null && source != self)
			{
				whodunnit = Source.GetTag();
				killerclass = source.GetClassName();
				murderweapon = "Monster";
			} else {
				whodunnit = "World";
				murderweapon = "World";
				killerclass = "World";
			}
			
			DoSelfObit(whodunnit, killerclass, MeansOfDeath, murderweapon);
		}
		
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}
	
	// Give the actor a real stupid name.
	virtual void GiveStupidName()
	{
		static const string NameList[] =
		{
			// 300 Pounds Stuff
			"Dog Pope",
			"WorldsMostBoringestGhost",
			"THE JERK",
			"DinosaurJones",
			"The Fuck Monster",
			"MAYOR HOBART DUNGLE",
			"FiveDrunkenBats",
			"[MLB]Slugfeast",
			"El_Tyrante",
			"HonestApe",
			"B-Ball Glitch",
			// Shade Thrown At Retro FPS Things
			"PolyObject-amorous",
			"MADE WITH UNITY",
			"Immersive Simp",			
			// New and Exciting! Yes.
			"AlternativeFaxMachine",
			"Microsoft Bing Crosby",
			"7-11 Denialist",
			"John Wayne's Subversives", // thx shadsy
			"Snr. Constable Daddy",
			"gimmick halloween name",
			"large_adult_son",
			"COMEDY USERNAME",
			"10X Pee-Drinker",
			"The Gosh of Heckfire",
			"Girl Poop",
			"Intranet Petition",
			"Elly the Oliphant",
			"The 24-Hour Rule",
			"Flaw Enforcer",
			"Resting Kitsch Face",
			"Sawn-Off Shogun",
			"sudo echo",
			"Hot Girl Summoner",
			"Fiverr Babysitter",
			"Ol' Jimmy Euphemisms",
			"Fiverr Hitman",
			"Inconspicuous Consumption",
			"Blood 'n' Silicone",
			"Emoji w/ a Bulge",
			"Bob Costas-Rican",
			"Captain's Pick"
		};
		
		int i;
		i = random(0,NameList.Size()-1);
		SetTag(NameList[i]);
	}
	
	override void BeginPlay()
	{
		GiveStupidName();
	}

	// Add the actor's new name to the obits when the player is killed.
    override String GetObituary(Actor victim, Actor inflictor, Name mod, bool playerattack)
    {
        if (mod == 'Telefrag')
        {
			//return "$OB_MONTELEFRAG";
			return string.format("%s %s.", Stringtable.Localize("$OB_MONTELEFRAG"), GetTag());
        }
        else if (mod == 'Melee' && HitObituary.Length() > 0)
        {
            //return HitObituary;
            string test = HitObituary;
            //return string.format("%s %s.",HitObituary, GetTag());
			return string.format("%s %s.", Stringtable.Localize(HitObituary), GetTag());
        }
        //return string.format("%s %s.",Obituary, GetTag());
		return string.format("%s %s.", Stringtable.Localize(Obituary), GetTag());
    }
	
	// Spam the console with their own obit when killed.
	virtual void DoSelfObit(string srcname, string srcclass, string mod, string weapon)
	{
		string endresult;
		endresult = string.format("%s was killed by %s with %s.", GetTag(), srcname, weapon);
		
		if (srcclass == "World")
		{
			endresult = string.format("%s killed their own dumb self.", GetTag(), srcname);
		}
		
		if (mod == "Telefrag")
		{
			endresult = string.format("%s was telefragged by %s!", GetTag(), srcname);
		}
		
		if (weapon == "Monster")
		{
			endresult = string.format("%s was killed by %s.", GetTag(), srcname);
			
			if (srcclass == "FDM_ZombieMan")
				endresult = string.format("%s was popped by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_ShotgunGuy")
				endresult = string.format("%s was peppered by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_DoomImp")
				endresult = string.format("%s was clawed by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_JPFGuy")
				endresult = string.format("%s was overpowered by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_QuakeRanger")
				endresult = string.format("%s was nailed by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_DukeBot")
				endresult = string.format("%s was owned by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_Santa")
				endresult = string.format("%s was roasted like a yule-log by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_Chubbs")
				endresult = string.format("%s was weighed down by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_BloodCultist")
				endresult = string.format("%s was pulped by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_CyberBruiser")
				endresult = string.format("%s was exploded by %s.", GetTag(), srcname);
			else if (srcclass == "FDM_Pacifist")
				endresult = string.format("%s was somehow pacifismed to death by %s.", GetTag(), srcname);
		}
		
		if (srcclass == "Player")
		{
			if (weapon == "FDM_Gauntlet")
				endresult = string.format("%s was sliced up by %s's Gauntlet.", GetTag(), srcname);
			else if (weapon == "FDM_Machinegun")
				endresult = string.format("%s was popped by %s's Machinegun.", GetTag(), srcname);
			else if (weapon == "FDM_Shotgun")
				endresult = string.format("%s was peppered by %s's Shotgun.", GetTag(), srcname);
			else if (weapon == "FDM_SuperShotgun")
				endresult = string.format("%s was splattered by %s's Super Shotgun.", GetTag(), srcname);
			else if (weapon == "FDM_Chaingun")
				endresult = string.format("%s was cut down by %s's Chaingun.", GetTag(), srcname);
			else if (weapon == "FDM_Minigun")
				endresult = string.format("%s was evaporated by %s's Minigun.", GetTag(), srcname);
			else if (weapon == "FDM_RocketLauncher")
				endresult = string.format("%s was blasted by %s's Rocket Launcher.", GetTag(), srcname);
			else if (weapon == "FDM_GrenadeLauncher")
				endresult = string.format("%s was wasted by %s's Grenade Launcher.", GetTag(), srcname);
			else if (weapon == "FDM_PlasmaRifle")
				endresult = string.format("%s was lit up by %s's Plasma Rifle.", GetTag(), srcname);
			else if (weapon == "FDM_Railgun")
				endresult = string.format("%s was railed by %s's Railgun.", GetTag(), srcname);
			else if (weapon == "FDM_BFG9000")
				endresult = string.format("%s was nuked by %s's BFG9000.", GetTag(), srcname);
			else if (weapon == "FDM_Flamethrower")
				endresult = string.format("%s was fried by %s's Flamethrower.", GetTag(), srcname);
			else if (weapon == "FDM_ExplosiveBarrel")
				endresult = string.format("%s was barreled over by %s.", GetTag(), srcname);
			else if (weapon == "FDM_Car")
				endresult = string.format("%s was roadkilled by %s.", GetTag(), srcname);
		}
		
		Console.printf("\cf%s", endresult);
	}

}